##### Temporal workflow files have different editor config #####
[*.workflow.cs]

# We use getters for queries, they cannot be properties
dotnet_diagnostic.CA1024.severity = none

# Don't force workflows to have static methods
dotnet_diagnostic.CA1822.severity = none

# Do not need task scheduler for workflows
dotnet_diagnostic.CA2008.severity = none

# Workflow randomness is intentionally deterministic
dotnet_diagnostic.CA5394.severity = none

# Allow async methods to not have await in them
dotnet_diagnostic.CS1998.severity = none

# Don't avoid, but rather encourage things using TaskScheduler.Current in workflows
dotnet_diagnostic.VSTHRD105.severity = none

[*.cs]

##### Temporal additions ######

# Please keep in alphabetical order by field.

# We cannot reasonably mark ourselves CLSCompliant one way or another if
# libraries we rely on like Microsoft.Extensions.Logging.Abstractions don't
dotnet_diagnostic.CA1014.severity = none

# We're ok with public nested types in samples
dotnet_diagnostic.CA1034.severity = none

# We use nullable types instead of checking params are non-null, even in public
# methods
dotnet_diagnostic.CA1062.severity = none

# Ok for samples to declare types outside namespaces in top-level program
dotnet_diagnostic.CA1050.severity = none

# We are not concerned with globalization (yet?). The below line does not work
# in our analyzers, so we disable each one
# dotnet_analyzer_diagnostic.category-Globalization.severity = none
dotnet_diagnostic.CA1303.severity = none
dotnet_diagnostic.CA1304.severity = none
dotnet_diagnostic.CA1307.severity = none
dotnet_diagnostic.CA1310.severity = none
dotnet_diagnostic.CA1311.severity = none

# Don't need to worry about name clashes across samples
dotnet_diagnostic.CA1724.severity = none

# Don't need to mark sample classes static
dotnet_diagnostic.CA1812.severity = none

# For simple examples, we don't have to make non-instance-access methods static
dotnet_diagnostic.CA1822.severity = none

# We accept logging performance is not important in samples
dotnet_diagnostic.CA1848.severity = none

# Don't need to seal sample classes
dotnet_diagnostic.CA1852.severity = none

# Don't need ConfigureAwait in samples
dotnet_diagnostic.CA2007.severity = none

# Sometimes we need relative URLs when the HTTP client already has an origin
dotnet_diagnostic.CA2234.severity = none

# Do not want to make all exceptions [Serializable], we don't support
# cross-AppDomain currently
dotnet_diagnostic.CA2237.severity = none

# Warn on unused imports
dotnet_diagnostic.IDE0005.severity = warning

# XML comment analysis not required in samples
dotnet_diagnostic.SA0001.severity = none

# Do not require "this." prefix, devs are smart enough to know when to qualify
dotnet_diagnostic.SA1101.severity = none

# Allow using directives outside of the namespace
dotnet_diagnostic.SA1200.severity = none

# Allow differently ordered members in samples
dotnet_diagnostic.SA1201.severity = none

# Don't require a blank line after every closing brace
dotnet_diagnostic.SA1513.severity = none

# Don't require a blank line before single line comments
dotnet_diagnostic.SA1515.severity = none

# Do not require XML doc in samples
dotnet_diagnostic.SA1600.severity = none

# Do not require file header
dotnet_diagnostic.SA1633.severity = none

# Types don't have to match filename in samples (may be defined in Program.cs)
dotnet_diagnostic.SA1649.severity = none

# We accept the deadlock fear by awaiting a task separate from where created
dotnet_diagnostic.VSTHRD003.severity = none

###############################

# Most of the rest of this was taken from other projects

#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#csharp_indent_case_contents_when_block
csharp_indent_case_contents_when_block = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require members of anonymous types to be on separate lines
csharp_new_line_before_members_in_anonymous_types = true
#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require braces to be on a new line for object_collection_array_initializers, properties, lambdas, types, anonymous_types, methods, accessors, and control_blocks (also known as "Allman" style)
csharp_new_line_before_open_brace = object_collection_array_initializers, properties, lambdas, types, anonymous_types, methods, accessors, control_blocks

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - Code block preferences

#prefer curly braces even for one line of code
csharp_prefer_braces = true:suggestion

#Style - expression bodied member options

#prefer block bodies for accessors
csharp_style_expression_bodied_accessors = false
#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false
#prefer block bodies for methods
csharp_style_expression_bodied_methods = false
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - expression level options

#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:suggestion
#prefer tuple names to ItemX properties
dotnet_style_explicit_tuple_names = true:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:suggestion
#prefer inferred anonymous type member names
dotnet_style_prefer_inferred_anonymous_type_member_names = false:suggestion
#prefer inferred tuple element names
dotnet_style_prefer_inferred_tuple_names = true:suggestion

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - Miscellaneous preferences

#prefer local functions over anonymous functions
csharp_style_pattern_local_over_anonymous_function = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

#Style - Pattern matching

#prefer pattern matching instead of is expression with type casts
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion